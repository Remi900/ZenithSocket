-- Roblox HTTP Client for Game Explorer
-- This replaces WebSocket with HTTP requests as requested

local ReplicatedStorage = game:GetService('ReplicatedStorage')

-- Configuration
local SERVER_URL =
    'https://9adb481e-ce2b-45da-a885-2b2417f10ef4-00-3avv3vwoxx3lh.picard.replit.dev/' -- Replace with your actual Replit URL
local BATCH_SIZE = 100 -- Process instances in batches for better performance

-- JSON encoding/decoding functions
local function jsonEncode(data)
    if type(data) == 'table' then
        local result = '{'
        local first = true
        for key, value in pairs(data) do
            if not first then
                result = result .. ','
            end
            first = false

            if type(key) == 'string' then
                result = result .. '"' .. key .. '":'
            else
                result = result .. tostring(key) .. ':'
            end

            if type(value) == 'string' then
                result = result .. '"' .. value .. '"'
            elseif type(value) == 'table' then
                result = result .. jsonEncode(value)
            else
                result = result .. tostring(value)
            end
        end
        result = result .. '}'
        return result
    else
        return tostring(data)
    end
end

-- HTTP Request Helper
local function sendHttpRequest(endpoint, data)
    local success, response = pcall(function()
        return request({
            Url = SERVER_URL .. endpoint,
            Method = 'POST',
            Headers = { ['Content-Type'] = 'application/json' },
            Body = jsonEncode(data or {}),
        })
    end)

    if success and response.Success then
        print('âœ“ Successfully sent to ' .. endpoint)
        return response.Body
    else
        warn('âœ— Failed to send to ' .. endpoint .. ': ' .. tostring(response))
    end

    return nil
end

-- Send connection ping
local function sendPing()
    return sendHttpRequest('/api/ping', {})
end

-- Send single instance
local function sendInstance(action, instance, path)
    local data = {
        action = action, -- "add", "update", or "remove"
        instance = instance,
        path = path,
    }
    return sendHttpRequest('/api/instance', data)
end

-- Send game tree (all instances at once)
local function sendGameTree(instances)
    local data = {
        instances = instances,
    }
    return sendHttpRequest('/api/game-tree', data)
end

-- Send game tree in batches for large datasets
local function sendGameTreeBatches(instances)
    local totalBatches = math.ceil(#instances / BATCH_SIZE)

    for i = 1, #instances, BATCH_SIZE do
        local endIndex = math.min(i + BATCH_SIZE - 1, #instances)
        local batch = {}

        for j = i, endIndex do
            table.insert(batch, instances[j])
        end

        local batchData = {
            instances = batch,
            batchIndex = math.floor((i - 1) / BATCH_SIZE),
            totalBatches = totalBatches,
            isLastBatch = endIndex == #instances,
        }

        sendHttpRequest('/api/game-tree-batch', batchData)

        -- Small delay between batches to avoid overwhelming the server
        wait(0.1)
    end
end

-- Send incremental update
local function sendIncrementalUpdate(added, modified, removed)
    local data = {
        added = added or {},
        modified = modified or {},
        removed = removed or {},
    }
    return sendHttpRequest('/api/incremental-update', data)
end

-- Convert a Roblox instance to the format expected by the server
local function convertInstance(instance, parentPath)
    local path = parentPath and (parentPath .. '.' .. instance.Name)
        or instance.Name

    -- Get properties
    local properties = {}

    -- Safe property extraction
    local function safeGetProperty(prop)
        local success, value = pcall(function()
            return instance[prop]
        end)
        return success and value or nil
    end

    -- Add common properties based on instance type
    if instance:IsA('BasePart') then
        properties.Position = safeGetProperty('Position')
        properties.Size = safeGetProperty('Size')
        properties.Material = safeGetProperty('Material')
        properties.Color = safeGetProperty('Color')
        properties.Transparency = safeGetProperty('Transparency')
    elseif instance:IsA('Model') then
        properties.PrimaryPart = instance.PrimaryPart
                and instance.PrimaryPart.Name
            or nil
    end

    -- Add custom properties
    properties.Parent = instance.Parent and instance.Parent.Name or nil

    -- Get children names
    local children = {}
    for _, child in pairs(instance:GetChildren()) do
        table.insert(children, child.Name)
    end

    return {
        id = instance:GetDebugId(), -- Unique identifier
        name = instance.Name,
        className = instance.ClassName,
        path = path,
        parent = parentPath,
        properties = properties,
        children = children,
    }
end

-- Scan entire game tree
local function scanGameTree()
    local instances = {}

    local function scanInstance(instance, parentPath)
        local convertedInstance = convertInstance(instance, parentPath)
        table.insert(instances, convertedInstance)

        -- Recursively scan children
        for _, child in pairs(instance:GetChildren()) do
            scanInstance(child, convertedInstance.path)
        end
    end

    -- Scan workspace
    scanInstance(game.Workspace, nil)

    return instances
end

-- Main execution
local function main()
    print('ðŸš€ Starting Roblox HTTP Game Explorer Client')

    -- Send initial ping
    sendPing()

    -- Scan and send game tree
    local instances = scanGameTree()
    print('ðŸ“Š Found ' .. #instances .. ' instances')

    if #instances > 1000 then
        print('ðŸ“¦ Using batch processing for large dataset')
        sendGameTreeBatches(instances)
    else
        print('ðŸ“¤ Sending all instances at once')
        sendGameTree(instances)
    end

    print('âœ… Game tree sent successfully!')

    -- Set up periodic ping (every 30 seconds)
    spawn(function()
        while true do
            wait(30)
            sendPing()
        end
    end)
end

-- Example usage for real-time updates
local function setupRealTimeTracking()
    -- Track when instances are added
    game.Workspace.ChildAdded:Connect(function(child)
        local instance = convertInstance(child, 'Workspace')
        sendInstance('add', instance)
    end)

    -- Track when instances are removed
    game.Workspace.ChildRemoved:Connect(function(child)
        local path = 'Workspace.' .. child.Name
        sendInstance('remove', nil, path)
    end)

    -- You can add more event listeners for other containers as needed
end

-- Run the main function
main()
setupRealTimeTracking()

return {
    sendPing = sendPing,
    sendInstance = sendInstance,
    sendGameTree = sendGameTree,
    sendIncrementalUpdate = sendIncrementalUpdate,
    scanGameTree = scanGameTree,
}
